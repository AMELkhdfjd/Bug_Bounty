## Scope Discovery

whois // to have more infos about a domain name

reverse whois // to find all the domains that belong to the same owner, tool like ViewDNS.info

## Certificate Parsing
to find hostnames that use the same ssl certificate

## Subdomain Enumeration

to have wordlists for domains https://github.com/danielmiessler/SecLists/

A good tool for automating the process is Altdns (https://github.com/infosec-au/altdns/), which discovers subdomains with names that are permutations of other subdomain names.

Next, find subdomains of subdomains by running the enumeration tools on the previous results

## Service Enumeration

with nmap =====> active scanning (attackers can be detected)
shodan, Censys and Project Sonar =====> passive scanning (no detection)

## Directory Brute-Forcing

with Gobuster or Dirbuster
 ./dirsearch.py -u scanme.nmap.org -e php // -e for extension
 gobuster dir -u target_url -w wordlist // -u to specify the subdomain to brute force
 
 dont visit all the urls one by one, inside use these tools to get screenshots:  EyeWitness (https://github.com/FortyNorthSecurity/EyeWitness/) or Snapper (https://github.com/dxa4481/Snapper/)
 >> . Keep an eye out for hidden services, such as developer or admin panels, directory listing pages, analytics pages, and pages that look outdated and illmaintained.
 
 ## Spidering the Site
 
 to identify all pages on a site, use ZAP tool  https://www.zaproxy.org/ (learn how on "the BOOK"

## Third-Party Hosting (look on the book)

## GitHub Recon

search for repos, usernames of employees on GitHub and try to look in the issues section, it contains leaks
, look for hardcoded secrets such as API keys, encryption keys, and database passwords
After finding some credentials, use the tool KeyHacks (https://github.com/streaak/keyhacks/) to validate them

Note:
>> Tools like Gitrob and TruffleHog can automate the GitHub recon process. Gitrob (https://github.com/michenriksen/gitrob/) locates potentially sensitive 
files pushed to public repositories on GitHub. TruffleHog (https://github.com/
trufflesecurity/truffleHog/) specializes in finding secrets in repositories by conducting regex searches and scanning for high-entropy strings.



## Other Sneaky OSINT Techniques

1. search for job positions proposed by the company to know the technos they are using, if not search on linkedin for past or current employees and check out their posts
2. check the employees' google calendar to see some notes and login creds

## Fingerpriting technos:

search with nmap for versions of services running, try with burp to get a response http to analyse the headers, they should contains infos about the server used, the scripting language, ...
search on the source code of the page for words like  powered by, built with, and running
several applications can automate this process. Wappalyzer (https://www.wappalyzer.com/) is a browser extension that identifies content management systems, frameworks, and programming languages used on a site. BuiltWith(https://builtwith.com/) is a website that shows you which web technologies a site is built with. StackShare (https://stackshare.io/) is an online platform that allows developers to share the tech they use. You can use it to find out if the organization’s developers have posted their tech stack. Finally, 80   Chapter 5
Retire.js is a tool that detects outdated JavaScript libraries and Node.js packages. You can use it to check for outdated technologies on a site.


## Automation scripts:

 you might categorize your scripts into recon scripts, fuzzing scripts, automated reporting
 
 ## scheduling automatic scans
 
 e can use cron jobs to schedule our scans. Cron is a job scheduler on 
Unix-based operating systems. It allows you to schedule jobs to run periodically. For example, you can run a script that checks for new endpoints on 
a particular site every day at the same time. Or you can run a scanner that 
checks for vulnerabilities on the same target every day. This way, you can 
monitor for changes in an application’s behavior and find ways to exploit it

































